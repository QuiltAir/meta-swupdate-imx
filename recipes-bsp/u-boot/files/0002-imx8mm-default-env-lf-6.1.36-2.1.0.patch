diff --git a/board/freescale/imx8mm_evk/imx8mm_evk.c b/board/freescale/imx8mm_evk/imx8mm_evk.c
index 2e9e91cd78..52d627d585 100644
--- a/board/freescale/imx8mm_evk/imx8mm_evk.c
+++ b/board/freescale/imx8mm_evk/imx8mm_evk.c
@@ -20,6 +20,7 @@
 #include <asm/io.h>
 #include "../common/tcpc.h"
 #include <usb.h>
+#include <timestamp.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -332,6 +333,7 @@ int board_late_init(void)
 	if (IS_ENABLED(CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG)) {
 		env_set("board_name", "EVK");
 		env_set("board_rev", "iMX8MM");
+		env_set("u-boot_version", PLAIN_VERSION"("U_BOOT_DATE"-"U_BOOT_TIME")");
 	}
 
 	return 0;
diff --git a/include/configs/imx8mm_evk.h b/include/configs/imx8mm_evk.h
index f4a9f0b833..f868a8a7db 100644
--- a/include/configs/imx8mm_evk.h
+++ b/include/configs/imx8mm_evk.h
@@ -9,6 +9,7 @@
 #include <linux/sizes.h>
 #include <linux/stringify.h>
 #include <asm/arch/imx-regs.h>
+#include <version.h>
 #include "imx_env.h"
 
 #define UBOOT_ITB_OFFSET			0x57C00
@@ -117,7 +118,8 @@
 	"mmcpart=1\0" \
 	"mmcroot=/dev/mmcblk1p2 rootwait rw\0" \
 	"mmcautodetect=yes\0" \
-	"mmcargs=setenv bootargs ${jh_clk} ${mcore_clk} console=${console} root=${mmcroot}\0 " \
+	"mmcargs=setenv bootargs ${jh_clk} console=${console} root=${mmcroot} " \
+        "cur_slot=${bootslot} U-Boot_ver=${u-boot_version}\0"\
 	"loadbootscript=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${bsp_script};\0" \
 	"bootscript=echo Running bootscript from mmc ...; " \
 		"source\0" \
@@ -154,7 +156,30 @@
 				"echo WARN: Cannot load the DT; " \
 			"fi; " \
 		"fi;\0" \
+	"bootslot=dualA\0" \
+	"u-boot_version=null\0" \
+	"usb_port=1\0" \
+	"post_opt=saveenv;\0" \
+	"adjustbootsource=if test ${bootslot} = dualA || test ${bootslot} = singlenormal; then run adjustbootsourceA; fi;" \
+        "if test ${bootslot} = dualB; then run adjustbootsourceB; fi\0" \
+	"altbootusb=echo Boot Fail! Get into usb fastboot download.;fastboot usb ${usb_port}\0" \
+	"altbootsingle=if test ${bootslot} = singlerescue; then run altbootusb; fi; if test ${bootslot} = singlenormal; then run swuboot; fi\0" \
+	"adjustbootsourceB=echo RootFs Slot B; setenv mmcpart 3; setenv mmcroot /dev/mmcblk${mmcdev}p4 rootwait rw\0" \
+	"adjustbootsourceA=echo RootFs Slot A; setenv mmcpart 1; setenv mmcroot /dev/mmcblk${mmcdev}p2 rootwait rw\0" \
+	"altbootRollbackB=echo Rolling back to slot dualB;setenv bootslot dualB;run post_opt;run bootcmd\0" \
+	"altbootRollbackA=echo Rolling back to slot dualA;setenv bootslot dualA;run post_opt;run bootcmd\0" \
+	"altbootdual=if test ${bootslot} = dualA ; then run altbootRollbackB; fi; if test ${bootslot} = dualB ; then run altbootRollbackA; fi;\0" \
+	"swuargs=setenv bootargs console=${console},${baudrate} earlycon=${earlycon},${baudrate} " \
+        "cur_slot=${bootslot} U-Boot_ver=${u-boot_version}\0"\
+	"loadswuimage=mmc read  ${loadaddr} 0x4000 0xF000\0" \
+	"loadswufdt=mmc read  ${fdt_addr} 0x13000 0x200\0" \
+	"loadswuramdisk=mmc read  ${initrd_addr} 0x15000 0x15000\0" \
+        "swuboot=echo swuboot ramdisk;run loadswuimage;run loadswufdt;run loadswuramdisk;run swuargs;booti ${loadaddr} ${initrd_addr} ${fdt_addr}\0" \
+        "altbootcmd=if test ${bootslot} = singlerescue ||  test ${bootslot} = singlenormal; then run altbootsingle; fi;" \
+	"if test ${bootslot} = dualA ||  test ${bootslot} = dualB; then run altbootdual; fi\0" \
 	"bsp_bootcmd=echo Running BSP bootcmd ...; " \
+	   "run adjustbootsource;" \
+	   "if test ${bootslot} = singlerescue;then run swuboot; fi;" \
 		"mmc dev ${mmcdev}; if mmc rescan; then " \
 		   "if run loadbootscript; then " \
 			   "run bootscript; " \
